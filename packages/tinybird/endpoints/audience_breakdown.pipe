TOKEN read_write READ
TOKEN read_only READ

NODE params
DESCRIPTION "Parameters for audience breakdown analytics"

SQL >
    %
    SELECT
        {{ String(workspaceId, required=True) }} AS workspace_id,
        {{ String(projectId, required=True) }} AS project_id,
        {{ String(campaignId, required=True) }} AS campaign_id,
        {{ DateTime64(periodStart, required=True) }} AS period_start,
        {{ DateTime64(periodEnd, required=True) }} AS period_end,
        {{ String(environment, required=True) }} AS environment,
        {{ String(campaignEnvironment, required=True) }} AS campaign_environment

NODE base_sessions
DESCRIPTION "Base session data for the specified period"

SQL >
    %
    SELECT 
        session_id,
        user_id,
        is_returning,
        device_type,
        device_os,
        browser,
        is_mobile,
        country,
        city,
        region,
        continent,
        coalesce(nullIf(utm_source, ''), 'Direct') AS utm_source,
        coalesce(nullIf(utm_medium, ''), 'Direct') AS utm_medium,
        coalesce(nullIf(utm_campaign, ''), 'Direct') AS utm_campaign,
        coalesce(nullIf(referrer, ''), 'Direct') AS referrer,
        CASE
            WHEN nullIf(source, '') IS NOT NULL THEN source
            WHEN nullIf(ref, '') IS NOT NULL THEN ref
            WHEN nullIf(utm_source, '') IS NOT NULL THEN utm_source
            ELSE 'Direct'
        END AS unified_source,
        landing_page_id,
        ab_test_variant_id,
        toHour(timestamp) AS hour_of_day,
        toDayOfWeek(timestamp) AS day_of_week,
        timestamp
    FROM session_v1
    WHERE workspace_id = (SELECT workspace_id FROM params)
      AND project_id = (SELECT project_id FROM params)
      AND campaign_id = (SELECT campaign_id FROM params)
      AND environment = (SELECT environment FROM params)
      AND campaign_environment = (SELECT campaign_environment FROM params)
      AND timestamp >= (SELECT period_start FROM params)
      AND timestamp <= (SELECT period_end FROM params)

NODE device_types
DESCRIPTION "Sessions breakdown by device type"

SQL >
    %
    SELECT 
        device_type,
        count(*) AS sessions,
        uniqExact(user_id) AS users,
        countIf(is_returning = 0) AS new_sessions,
        countIf(is_returning = 1) AS returning_sessions
    FROM base_sessions
    GROUP BY device_type
    ORDER BY sessions DESC
    LIMIT 10

NODE operating_systems
DESCRIPTION "Sessions breakdown by operating system"

SQL >
    %
    SELECT 
        device_os,
        count(*) AS sessions,
        uniqExact(user_id) AS users,
        countIf(is_returning = 0) AS new_sessions,
        countIf(is_returning = 1) AS returning_sessions
    FROM base_sessions
    GROUP BY device_os
    ORDER BY sessions DESC
    LIMIT 10

NODE browsers
DESCRIPTION "Sessions breakdown by browser"

SQL >
    %
    SELECT 
        browser,
        count(*) AS sessions,
        uniqExact(user_id) AS users,
        countIf(is_returning = 0) AS new_sessions,
        countIf(is_returning = 1) AS returning_sessions
    FROM base_sessions
    GROUP BY browser
    ORDER BY sessions DESC
    LIMIT 10

NODE countries
DESCRIPTION "Sessions breakdown by country"

SQL >
    %
    SELECT 
        country,
        count(*) AS sessions,
        uniqExact(user_id) AS users,
        countIf(is_returning = 0) AS new_sessions,
        countIf(is_returning = 1) AS returning_sessions
    FROM base_sessions
    GROUP BY country
    ORDER BY sessions DESC
    LIMIT 15

NODE cities
DESCRIPTION "Sessions breakdown by city"

SQL >
    %
    SELECT 
        city,
        country,
        count(*) AS sessions,
        uniqExact(user_id) AS users,
        countIf(is_returning = 0) AS new_sessions,
        countIf(is_returning = 1) AS returning_sessions
    FROM base_sessions
    GROUP BY city, country
    ORDER BY sessions DESC
    LIMIT 20

NODE utm_sources
DESCRIPTION "Sessions breakdown by UTM source"

SQL >
    %
    SELECT 
        utm_source,
        count(*) AS sessions,
        uniqExact(user_id) AS users,
        countIf(is_returning = 0) AS new_sessions,
        countIf(is_returning = 1) AS returning_sessions
    FROM base_sessions
    GROUP BY utm_source
    ORDER BY sessions DESC
    LIMIT 10

NODE sources
DESCRIPTION "Sessions breakdown by unified source (source > ref > utm_source > direct)"

SQL >
    %
    SELECT
        unified_source AS source,
        count(*) AS sessions,
        uniqExact(user_id) AS users,
        countIf(is_returning = 0) AS new_sessions,
        countIf(is_returning = 1) AS returning_sessions
    FROM base_sessions
    GROUP BY unified_source
    ORDER BY sessions DESC
    LIMIT 10

NODE utm_mediums
DESCRIPTION "Sessions breakdown by UTM medium"

SQL >
    %
    SELECT 
        utm_medium,
        count(*) AS sessions,
        uniqExact(user_id) AS users,
        countIf(is_returning = 0) AS new_sessions,
        countIf(is_returning = 1) AS returning_sessions
    FROM base_sessions
    GROUP BY utm_medium
    ORDER BY sessions DESC
    LIMIT 10

NODE utm_campaigns
DESCRIPTION "Sessions breakdown by UTM campaign"

SQL >
    %
    SELECT 
        utm_campaign,
        count(*) AS sessions,
        uniqExact(user_id) AS users,
        countIf(is_returning = 0) AS new_sessions,
        countIf(is_returning = 1) AS returning_sessions
    FROM base_sessions
    GROUP BY utm_campaign
    ORDER BY sessions DESC
    LIMIT 10

NODE referrers
DESCRIPTION "Sessions breakdown by referrer domain"

SQL >
    %
    SELECT 
        CASE 
            WHEN referrer = 'Direct' THEN 'Direct'
            ELSE extractURLParameter(referrer, 'domain')
        END AS referrer_domain,
        count(*) AS sessions,
        uniqExact(user_id) AS users,
        countIf(is_returning = 0) AS new_sessions,
        countIf(is_returning = 1) AS returning_sessions
    FROM base_sessions
    GROUP BY referrer_domain
    ORDER BY sessions DESC
    LIMIT 10

NODE user_types
DESCRIPTION "Sessions breakdown by user type (new vs returning)"

SQL >
    %
    SELECT 
        CASE 
            WHEN is_returning = 0 THEN 'New'
            ELSE 'Returning'
        END AS user_type,
        count(*) AS sessions,
        uniqExact(user_id) AS users
    FROM base_sessions
    GROUP BY user_type
    ORDER BY sessions DESC

NODE hourly_distribution
DESCRIPTION "Sessions distribution by hour of day"

SQL >
    %
    SELECT 
        toHour(timestamp) AS hour,
        count(*) AS sessions,
        uniqExact(user_id) AS users,
        countIf(is_returning = 0) AS new_sessions,
        countIf(is_returning = 1) AS returning_sessions
    FROM base_sessions
    GROUP BY hour
    ORDER BY hour

NODE daily_distribution
DESCRIPTION "Sessions distribution by day of week"

SQL >
    %
    SELECT 
        toDayOfWeek(timestamp) AS day_of_week,
        CASE 
            WHEN toDayOfWeek(timestamp) = 1 THEN 'Monday'
            WHEN toDayOfWeek(timestamp) = 2 THEN 'Tuesday'
            WHEN toDayOfWeek(timestamp) = 3 THEN 'Wednesday'
            WHEN toDayOfWeek(timestamp) = 4 THEN 'Thursday'
            WHEN toDayOfWeek(timestamp) = 5 THEN 'Friday'
            WHEN toDayOfWeek(timestamp) = 6 THEN 'Saturday'
            WHEN toDayOfWeek(timestamp) = 7 THEN 'Sunday'
        END AS day_name,
        count(*) AS sessions,
        uniqExact(user_id) AS users,
        countIf(is_returning = 0) AS new_sessions,
        countIf(is_returning = 1) AS returning_sessions
    FROM base_sessions
    GROUP BY day_of_week, day_name
    ORDER BY day_of_week

NODE landing_pages
DESCRIPTION "Sessions breakdown by landing page"

SQL >
    %
    SELECT 
        landing_page_id,
        count(*) AS sessions,
        uniqExact(user_id) AS users,
        countIf(is_returning = 0) AS new_sessions,
        countIf(is_returning = 1) AS returning_sessions
    FROM base_sessions
    WHERE landing_page_id IS NOT NULL
    GROUP BY landing_page_id
    ORDER BY sessions DESC
    LIMIT 15

NODE ab_test_variants
DESCRIPTION "Sessions breakdown by AB test variant"

SQL >
    %
    SELECT 
        ab_test_variant_id,
        count(*) AS sessions,
        uniqExact(user_id) AS users,
        countIf(is_returning = 0) AS new_sessions,
        countIf(is_returning = 1) AS returning_sessions
    FROM base_sessions
    WHERE ab_test_variant_id IS NOT NULL
    GROUP BY ab_test_variant_id
    ORDER BY sessions DESC
    LIMIT 10

NODE totals
DESCRIPTION "Total metrics for percentage calculations"

SQL >
    %
    SELECT 
        count(*) AS total_sessions,
        uniqExact(user_id) AS total_users
    FROM base_sessions

NODE response
DESCRIPTION "Complete audience breakdown response"

SQL >
    %
    WITH 
    totals_data AS (
        SELECT total_sessions, total_users FROM totals
    ),
    device_types_array AS (
        SELECT groupArray(tuple(
            device_type, 
            sessions, 
            users,
            new_sessions,
            returning_sessions,
            round((sessions * 100.0) / (SELECT total_sessions FROM totals_data), 2)
        )) AS device_types FROM device_types
    ),
    operating_systems_array AS (
        SELECT groupArray(tuple(
            device_os, 
            sessions, 
            users,
            new_sessions,
            returning_sessions,
            round((sessions * 100.0) / (SELECT total_sessions FROM totals_data), 2)
        )) AS operating_systems FROM operating_systems
    ),
    browsers_array AS (
        SELECT groupArray(tuple(
            browser, 
            sessions, 
            users,
            new_sessions,
            returning_sessions,
            round((sessions * 100.0) / (SELECT total_sessions FROM totals_data), 2)
        )) AS browsers FROM browsers
    ),
    countries_array AS (
        SELECT groupArray(tuple(
            country, 
            sessions, 
            users,
            new_sessions,
            returning_sessions,
            round((sessions * 100.0) / (SELECT total_sessions FROM totals_data), 2)
        )) AS countries FROM countries
    ),
    cities_array AS (
        SELECT groupArray(tuple(
            city,
            country, 
            sessions, 
            users,
            new_sessions,
            returning_sessions,
            round((sessions * 100.0) / (SELECT total_sessions FROM totals_data), 2)
        )) AS cities FROM cities
    ),
    utm_sources_array AS (
        SELECT groupArray(tuple(
            utm_source, 
            sessions, 
            users,
            new_sessions,
            returning_sessions,
            round((sessions * 100.0) / (SELECT total_sessions FROM totals_data), 2)
        )) AS utm_sources FROM utm_sources
    ),
    sources_array AS (
        SELECT groupArray(tuple(
            source,
            sessions,
            users,
            new_sessions,
            returning_sessions,
            round((sessions * 100.0) / (SELECT total_sessions FROM totals_data), 2)
        )) AS sources FROM sources
    ),
    utm_mediums_array AS (
        SELECT groupArray(tuple(
            utm_medium, 
            sessions, 
            users,
            new_sessions,
            returning_sessions,
            round((sessions * 100.0) / (SELECT total_sessions FROM totals_data), 2)
        )) AS utm_mediums FROM utm_mediums
    ),
    utm_campaigns_array AS (
        SELECT groupArray(tuple(
            utm_campaign, 
            sessions, 
            users,
            new_sessions,
            returning_sessions,
            round((sessions * 100.0) / (SELECT total_sessions FROM totals_data), 2)
        )) AS utm_campaigns FROM utm_campaigns
    ),
    referrers_array AS (
        SELECT groupArray(tuple(
            referrer_domain, 
            sessions, 
            users,
            new_sessions,
            returning_sessions,
            round((sessions * 100.0) / (SELECT total_sessions FROM totals_data), 2)
        )) AS referrers FROM referrers
    ),
    user_types_array AS (
        SELECT groupArray(tuple(
            user_type, 
            sessions, 
            users,
            round((sessions * 100.0) / (SELECT total_sessions FROM totals_data), 2)
        )) AS user_types FROM user_types
    ),
    hourly_distribution_array AS (
        SELECT groupArray(tuple(
            hour, 
            sessions, 
            users,
            new_sessions,
            returning_sessions,
            round((sessions * 100.0) / (SELECT total_sessions FROM totals_data), 2)
        )) AS hourly_distribution FROM hourly_distribution
    ),
    daily_distribution_array AS (
        SELECT groupArray(tuple(
            day_of_week,
            day_name, 
            sessions, 
            users,
            new_sessions,
            returning_sessions,
            round((sessions * 100.0) / (SELECT total_sessions FROM totals_data), 2)
        )) AS daily_distribution FROM daily_distribution
    ),
    landing_pages_array AS (
        SELECT groupArray(tuple(
            landing_page_id, 
            sessions, 
            users,
            new_sessions,
            returning_sessions,
            round((sessions * 100.0) / (SELECT total_sessions FROM totals_data), 2)
        )) AS landing_pages FROM landing_pages
    ),
    ab_test_variants_array AS (
        SELECT groupArray(tuple(
            ab_test_variant_id, 
            sessions, 
            users,
            new_sessions,
            returning_sessions,
            round((sessions * 100.0) / (SELECT total_sessions FROM totals_data), 2)
        )) AS ab_test_variants FROM ab_test_variants
    )
    SELECT
        t.total_sessions,
        t.total_users,
        coalesce(dt.device_types, []) AS device_types,
        coalesce(os.operating_systems, []) AS operating_systems,
        coalesce(br.browsers, []) AS browsers,
        coalesce(co.countries, []) AS countries,
        coalesce(ci.cities, []) AS cities,
        coalesce(us.utm_sources, []) AS utm_sources,
        coalesce(s.sources, []) AS sources,
        coalesce(um.utm_mediums, []) AS utm_mediums,
        coalesce(uc.utm_campaigns, []) AS utm_campaigns,
        coalesce(rf.referrers, []) AS referrers,
        coalesce(ut.user_types, []) AS user_types,
        coalesce(hd.hourly_distribution, []) AS hourly_distribution,
        coalesce(dd.daily_distribution, []) AS daily_distribution,
        coalesce(lp.landing_pages, []) AS landing_pages,
        coalesce(av.ab_test_variants, []) AS ab_test_variants
    FROM totals_data t
    LEFT JOIN device_types_array dt ON 1=1
    LEFT JOIN operating_systems_array os ON 1=1
    LEFT JOIN browsers_array br ON 1=1
    LEFT JOIN countries_array co ON 1=1
    LEFT JOIN cities_array ci ON 1=1
    LEFT JOIN utm_sources_array us ON 1=1
    LEFT JOIN sources_array s ON 1=1
    LEFT JOIN utm_mediums_array um ON 1=1
    LEFT JOIN utm_campaigns_array uc ON 1=1
    LEFT JOIN referrers_array rf ON 1=1
    LEFT JOIN user_types_array ut ON 1=1
    LEFT JOIN hourly_distribution_array hd ON 1=1
    LEFT JOIN daily_distribution_array dd ON 1=1
    LEFT JOIN landing_pages_array lp ON 1=1
    LEFT JOIN ab_test_variants_array av ON 1=1

TYPE ENDPOINT